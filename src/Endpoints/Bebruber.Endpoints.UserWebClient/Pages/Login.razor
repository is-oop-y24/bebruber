@page "/login"
@using Bebruber.Endpoints.UserWebClient.Interfaces
@using Bebruber.Endpoints.UserWebClient.Models
@inject IAccountService _accountService
@inject IJSRuntime JS
@inject NavigationManager _navigationManager

<div class="card">
    <h4 class="card-header">Вход</h4>
    <div class="card-body">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Номер телефона</label>
                <InputText @bind-Value="_model.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => _model.PhoneNumber)" />
            </div>
            <div class="form-group">
                <label>Пароль</label>
                <InputText @bind-Value="_model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <button disabled="@_loading" class="btn btn-primary">
                @if (_loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Войти
            </button>
            <NavLink href="/register" class="btn btn-link">Нет аккаунта? Зарегистрироваться.</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel _model = new();
    private bool _loading;

    private async Task OnValidSubmit()
    {
        _loading = true;
        try
        {
            await _accountService.Login(_model);
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("alert", e.Message);
        }
        _loading = false;
    }
}