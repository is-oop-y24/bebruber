@page "/login"
@using Bebruber.Endpoints.DriverWebClient.Interfaces
@using Bebruber.Endpoints.Shared.Models
@inject IJSRuntime _js
@inject NavigationManager _navigationManager
@inject IAccountService _accountService

<div class="card">
    <h4 class="card-header" style="background-color: #ffffff">Вход</h4>
    <div class="card-body">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Номер телефона или адрес электронной почты`</label>
                <InputText @bind-Value="_model.Email" class="form-control"/>
                <ValidationMessage For="@(() => _model.Email)"/>
            </div>
            <div class="form-group">
                <label>Пароль</label>
                <Addons>    
                    <Addon AddonType="AddonType.Body">
                        <InputText type="@_passwordFieldType" @bind-Value="@_model.Password" class="form-control" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" @onclick="UpdatePasswordVisibility">@_buttonText</Button>
                    </Addon>
                </Addons>
                <ValidationMessage For="@(() => _model.Password)"/>
            </div>`
            <button disabled="@_loading" class="btn btn-primary">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Войти
            </button>
            <NavLink href="/register" class="btn btn-link">Нет аккаунта? Зарегистрироваться.</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel _model = new();
    private bool _loading;
    private string _passwordFieldType = "password";
    private string _buttonText = "Показать пароль";

    private async Task OnValidSubmit()
    {
        _loading = true;
        try
        {
            await _accountService.Login(_model);
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            await _js.InvokeVoidAsync("alert", e.Message);
        }
        _loading = false;
    }
    private void UpdatePasswordVisibility()
    {
        _passwordFieldType = _passwordFieldType == "text" ? "password" : "text";
        _buttonText = _passwordFieldType == "text" ? "Скрыть пароль" : "Показать пароль";
    }

}