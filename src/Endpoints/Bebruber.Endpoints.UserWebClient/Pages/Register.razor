@page "/register"
@using Bebruber.Endpoints.UserWebClient.Models
@using Bebruber.Endpoints.UserWebClient.Interfaces
@inject IAccountService _accountService
@inject IJSRuntime JS

<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Phone Number</label>
                <InputText @bind-Value="_model.PhoneNumber" type="" class="form-control" />
                <ValidationMessage For="@(() => _model.PhoneNumber)" />
            </div>
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="_model.Name" class="form-control" />
                <ValidationMessage For="@(() => _model.Name)" />
            </div>
            <div class="form-group">
                <label>Surname</label>
                <InputText @bind-Value="_model.Surname" class="form-control" />
                <ValidationMessage For="@(() => _model.Surname)" />
                </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="_model.Password" type="@_passwordFieldType" class="form-control" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <div class="form-group">
                <label>Show password</label>
                <input type="checkbox" @bind="_showPassword" @onclick="UpdatePasswordVisibility" class="form-control">Show password</input>
            </div>
            <button disabled="@_loading" class="btn btn-primary">
                @if (_loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            <NavLink href="/login" class="btn btn-link">Already have an account? Login.</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel _model = new();
    private bool _loading;
    private string _passwordFieldType = "password";
    private bool _showPassword;

    private async Task OnValidSubmit()
    {
        _loading = true;
        try
        {
            await _accountService.Register(_model);
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("alert", e.Message);
        }
        _loading = false;
    }

    public void UpdatePasswordVisibility()
    {
        _passwordFieldType = _showPassword ? "password" : "text";
    }
}