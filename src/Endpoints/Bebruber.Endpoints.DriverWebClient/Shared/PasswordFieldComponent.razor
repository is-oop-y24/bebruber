@using System.Linq.Expressions
@using System.Globalization
@typeparam T
@inherits InputBase<T>

<Addons>
    <Addon AddonType="AddonType.Body">
         <input type="@_passwordFieldType" bind="@CurrentValue" id="@Id" class="@CssClass" />
    </Addon>
    <Addon AddonType="AddonType.End">
        <Button Color="Color.Primary" @onclick="UpdatePasswordVisibility">@_buttonText</Button>
    </Addon>
</Addons>

@code {
    private string _passwordFieldType = "password";
    private string _buttonText = "Показать пароль";
    
    [Parameter] public string Id { get; set; }
    [Parameter] public Expression<Func<T>> ValidationFor { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowDefaultOption { get; set; } = true;

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        if (typeof(T) == typeof(string))
        {
            result = (T)(object)value;
            validationErrorMessage = null;

            return true;
        }
        if (typeof(T) == typeof(int))
        {
            int.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        if (typeof(T) == typeof(Guid))
        {
            Guid.TryParse(value, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        if (typeof(T).IsEnum)
        {
            try
            {
                result = (T)Enum.Parse(typeof(T), value);
                validationErrorMessage = null;

                return true;
            }
            catch (ArgumentException)
            {
                result = default;
                validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not valid.";

                return false;
            }
        }

        throw new InvalidOperationException($"{GetType()} does not support the type '{typeof(T)}'.");
    }

    private void UpdatePasswordVisibility()
    {
        _passwordFieldType = _passwordFieldType == "text" ? "password" : "text";
        _buttonText = _passwordFieldType == "text" ? "Скрыть пароль" : "Показать пароль";
    }
}